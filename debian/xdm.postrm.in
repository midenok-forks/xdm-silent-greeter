#!/bin/sh
# Debian xdm package post-removal script
# Copyright 1998-2000, 2003, 2004 Branden Robinson.
# Licensed under the GNU General Public License, version 2.  See the file
# /usr/share/common-licenses/GPL or <http://www.gnu.org/copyleft/gpl.txt>.
# Acknowledgements to Stephen Early, Mark Eichin, and Manoj Srivastava.

set -e

THIS_PACKAGE=xdm
THIS_SCRIPT=postrm

#INCLUDE_SHELL_LIB#

DAEMON=/usr/bin/xdm
DEFAULT_DISPLAY_MANAGER_FILE=/etc/X11/default-display-manager

#DEBHELPER#

if [ "$1" = "purge" ]; then
  update-rc.d xdm remove
  for DIR in /etc/X11/xdm /var/lib/xdm; do
    if [ -d "$DIR" ]; then
      rm -r "$DIR"
    fi
  done
  if [ -f "$DEFAULT_DISPLAY_MANAGER_FILE" ] && \
     [ "$(cat "$DEFAULT_DISPLAY_MANAGER_FILE")" = "$DAEMON" ]; then
    rm "$DEFAULT_DISPLAY_MANAGER_FILE"
    rmdir --ignore-fail-on-non-empty /etc/X11
  fi
fi

if [ "$1" = "abort-upgrade" ]; then
  # NOTE: The following is copied from the postinst script and isn't necessary
  # if dpkg executes a package's postinst script with the "configure" argument
  # after unwinding from a failed upgrade.  (See section 6.5 of the Debian
  # Policy Manual, "Details of unpack phase of installation or upgrade".)

  # We are here because an upgrade is being aborted; check the options file to
  # see if the user wants the daemon (re-)started.
  NOSTART=
  XDM_WHERE=
  # Don't start the daemon if the options file says not to.
  if ! grep -qs ^restart-on-upgrade /etc/X11/xdm/xdm.options; then
    NOSTART=yes
  fi

  # At this point we may think we *should* be starting the daemon, but we need
  # to do some more checks.

  # Also don't start the daemon if it's already running...
  if [ -s /etc/X11/xdm/Xservers ]; then
    MANAGED_DISPLAYS="$(egrep -v '^[[:space:]]*#' /etc/X11/xdm/Xservers \
                        | sed 's/[[:space:]].*//')"
    if [ -n "$MANAGED_DISPLAYS" ]; then
      for MANAGED_DISPLAY in $MANAGED_DISPLAYS; do
        if echo "$DISPLAY" | grep -q "^$MANAGED_DISPLAY"; then
          # Note our refusal to start the daemon if we were supposed to start
          # it.
          [ -n "$NOSTART" ] || DENYSTART=yes
          XDM_WHERE="$DISPLAY, which xdm will attempt to manage"
          break
        fi
      done
    fi
  fi

  # If the user wanted us to start the daemon but we refuse, explain why.
  if [ -n "$DENYSTART" ]; then
    warn "not starting xdm because it is already running at $XDM_WHERE"
    NOSTART=yes
  fi

  [ -n "$NOSTART" ] || invoke-rc.d xdm start || true

  # Remove flag files.
  rm -f /var/run/xdm.install
fi

exit 0

# vim:set ai et sts=2 sw=2 tw=80:
