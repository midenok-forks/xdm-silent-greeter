# HG changeset patch
# User ejka@imfi.kspu.ru
# Node ID fbeb28a122da949d0e70dd30956800ae707700d3
# Parent  77625b567802c5b6977eddb845f391e65a8733d0
Applied 002_xdm_fixes.diff

Index: xdm/auth.c
===================================================================
--- xdm.orig/auth.c
+++ xdm/auth.c
@@ -48,6 +48,7 @@
 #include "dm_error.h"
 
 #include <errno.h>
+#include <fcntl.h>
 
 #include <sys/ioctl.h>
 
Index: xdm/dm.c
===================================================================
--- xdm.orig/dm.c
+++ xdm/dm.c
@@ -41,6 +41,7 @@
 # include	"dm_error.h"
 
 # include	<stdio.h>
+# include	<string.h>
 #ifdef X_POSIX_C_SOURCE
 #define _POSIX_C_SOURCE X_POSIX_C_SOURCE
 #include <signal.h>
@@ -569,9 +570,10 @@
 		    RestartDisplay (d, FALSE);
 		break;
 	    default:
-		Debug ("Display exited with unknown status %d\n", waitVal(status));
-		LogError ("Unknown session exit code %d from process %d\n",
-			  waitVal (status), pid);
+		Debug ("display %s exited with unknown status %d\n",
+		       d->name, waitVal(status));
+		LogError ("display %s (pid %ld) exited with unexpected status "
+			  "%d\n", d->name, waitVal (status), (long) pid);
 		StopDisplay (d);
 		break;
 	    }
Index: xdm/genauth.c
===================================================================
--- xdm.orig/genauth.c
+++ xdm/genauth.c
@@ -42,6 +42,8 @@
 # include   "dm_error.h"
 
 #include <errno.h>
+#include <fcntl.h>
+#include <string.h>
 
 #include <time.h>
 #define Time_t time_t
Index: xdm/session.c
===================================================================
--- xdm.orig/session.c
+++ xdm/session.c
@@ -878,12 +878,14 @@
     open ("/dev/null", O_RDONLY);
     /* make stdout follow stderr to the log file */
     dup2 (2,1);
+    Debug ("attempting to execve() %s\n", argv[0]);
     execve (argv[0], argv, environ);
     /*
      * In case this is a shell script which hasn't been
      * made executable (or this is a SYSV box), do
      * a reasonable thing
      */
+    Debug ("execve() of %s failed: %s\n", argv[0], _SysErrorMsg (errno));
     if (errno != ENOENT) {
 	char	program[1024], *e, *p, *optarg;
 	FILE	*f;
@@ -942,6 +944,7 @@
 	while ((*av++ = *argv++))
 	    /* SUPPRESS 530 */
 	    ;
+	Debug ("attempting to execve() %s\n", newargv[0]);
 	execve (newargv[0], newargv, environ);
     }
 }
Index: xdm/xdm.man.cpp
===================================================================
--- xdm.orig/xdm.man.cpp
+++ xdm/xdm.man.cpp
@@ -289,7 +289,7 @@
 this resource to ``false'' will disable this feature.
 .IP "\fBDisplayManager.pidFile\fP"
 The filename specified will be created to contain an ASCII
-representation of the process-id of the main
+representation of the process ID of the main
 .I xdm
 process.
 .I Xdm
@@ -353,9 +353,11 @@
 #ifdef DEV_RANDOM
 .IP \fBDisplayManager.randomDevice\fP
 A file to read 8 bytes from to generate the seed of authorization keys.
-The default is \fI DEV_RANDOM \fP. If this file cannot be read, or if a
-read blocks for more than 5 seconds, xdm falls back to using a checksum
-of \fBDisplayManager.randomFile\fP to generate the seed.
+The default is
+.IR DEV_RANDOM .
+If this file cannot be read, or if a read blocks for more than 5 seconds,
+xdm falls back to using a checksum of \fBDisplayManager.randomFile\fP to
+generate the seed.
 #endif
 #if !defined(ARC4_RANDOM)
 .IP \fBDisplayManager.prngdSocket\fP
Index: xdm/xdmauth.c
===================================================================
--- xdm.orig/xdmauth.c
+++ xdm/xdmauth.c
@@ -45,6 +45,18 @@
 static char	auth_name[256];
 static int	auth_name_len;
 
+static void XdmPrintDataHex (char *s, char *a, int l);
+# ifdef XDMCP
+static void XdmPrintArray8Hex (char *s, ARRAY8Ptr a);
+# endif
+static Xauth *XdmGetAuthHelper (unsigned short namelen,
+				char *name,
+				int includeRho);
+# ifdef XDMCP
+static int HexToBinary (char *key);
+static int XdmGetKey (struct protoDisplay *pdpy, ARRAY8Ptr displayID);
+# endif
+
 static void
 XdmPrintDataHex (char *s, char *a, int l)
 {
@@ -182,7 +194,9 @@
     XdmPrintDataHex ("Accept packet auth", xdmcpauth->data, xdmcpauth->data_length);
     XdmPrintDataHex ("Auth file auth", fileauth->data, fileauth->data_length);
     /* encrypt the session key for its trip back to the server */
-    XdmcpWrap (xdmcpauth->data, (unsigned char *)&pdpy->key, xdmcpauth->data, 8);
+    XdmcpWrap ((unsigned char *)&xdmcpauth->data,
+	       (unsigned char *)&pdpy->key,
+	       (unsigned char *)&xdmcpauth->data, 8);
     pdpy->fileAuthorization = fileauth;
     pdpy->xdmcpAuthorization = xdmcpauth;
 }
Index: xdm/xdmshell.c
===================================================================
--- xdm.orig/xdmshell.c
+++ xdm/xdmshell.c
@@ -41,6 +41,7 @@
 #include <stdio.h>
 #include "dm.h"
 #include <errno.h>
+#include <string.h>
 
 #ifdef macII
 #define ON_CONSOLE_ONLY
